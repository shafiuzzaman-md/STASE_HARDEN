/** @file
  header file for Executing some code on the Smm Stack
**/

#ifndef _SMM_LEGACY_DISPATCH_H_
#define _SMM_LEGACY_DISPATCH_H_

#include <PiSmm.h>
#include <Library/UefiDriverEntryPoint.h>
#include <Library/UefiBootServicesTableLib.h>
#include <Library/UefiRuntimeServicesTableLib.h>
#include <Library/SmmServicesTableLib.h>
#include <Library/MmServicesTableLib.h>
#include <Library/BaseLib.h>
#include <Library/BaseMemoryLib.h>
#include <Library/DebugLib.h>
#include <Library/SmmMemLib.h>
#include <Protocol/SmmMemoryAttribute.h>
#include <Uefi.h>
#include <Library/PrintLib.h>
#include <Library/IoLib.h>

// #include "../../../UefiCpuPkg/PiSmmCpuDxeSmm/PiSmmCpuDxeSmm.h"

typedef struct _EDKII_SMM_LEGACY_PROTOCOL EDKII_SMM_LEGACY_PROTOCOL;

typedef struct {
  UINTN    InputValue;
} EDKII_SMM_LEGACY_REGISTER_CONTEXT;

///
/// The DispatchFunction will be called with Context set to the same value as was passed into
/// this function in RegisterContext and with CommBuffer (and CommBufferSize) pointing
/// to an instance of EFI_SMM_SW_CONTEXT indicating the index of the CPU which generated the
/// software SMI.
///
typedef struct {
  /// This value corresponds directly to the DataPort parameter used in the call to Trigger().
  ///
  UINT8    CommandPort;
} EFI_SMM_LEGACY_CONTEXT;


/**
  Register a child SMI source dispatch function for the specified software SMI.

  This service registers a function (DispatchFunction) which will be called when the software
  SMI source specified by RegisterContext->SwSmiCpuIndex is detected. On return,
  DispatchHandle contains a unique handle which may be used later to unregister the function
  using UnRegister().

  @param[in]  This                 Pointer to the EDKII_SMM_LEGACY_PROTOCOL instance.
  @param[in]  DispatchFunction     Function to register for handler when the specified software
                                   SMI is generated.
  @param[in, out] RegisterContext  Pointer to the dispatch function's context.
                                   The caller fills this context in before calling
                                   the register function to indicate to the register
                                   function which Software SMI input value the
                                   dispatch function should be invoked for.
  @param[out] DispatchHandle       Handle generated by the dispatcher to track the
                                   function instance.

  @retval EFI_SUCCESS            The dispatch function has been successfully
                                 registered and the SMI source has been enabled.
  @retval EFI_DEVICE_ERROR       The SW driver was unable to enable the SMI source.
  @retval EFI_INVALID_PARAMETER  RegisterContext is invalid. The SW SMI input value
                                 is not within a valid range or is already in use.
  @retval EFI_OUT_OF_RESOURCES   There is not enough memory (system or SMM) to manage this
                                 child.
  @retval EFI_OUT_OF_RESOURCES   A unique software SMI value could not be assigned
                                 for this dispatch.
**/
typedef
EFI_STATUS
(EFIAPI *EFI_SMM_LEGACY_REGISTER)(
  IN  CONST EDKII_SMM_LEGACY_PROTOCOL           *This,
  IN        EFI_SMM_HANDLER_ENTRY_POINT2        DispatchFunction,
  IN  OUT   EDKII_SMM_LEGACY_REGISTER_CONTEXT   *RegisterContext,
  OUT       EFI_HANDLE                          *DispatchHandle
  );

/**
  Unregister a child SMI source dispatch function for the specified software SMI.

  This service removes the handler associated with DispatchHandle so that it will no longer be
  called in response to a software SMI.

  @param[in] This                Pointer to the EFI_SMM_SW_DISPATCH2_PROTOCOL instance.
  @param[in] DispatchHandle      Handle of dispatch function to deregister.

  @retval EFI_SUCCESS            The dispatch function has been successfully unregistered.
  @retval EFI_INVALID_PARAMETER  The DispatchHandle was not valid.
**/
typedef
EFI_STATUS
(EFIAPI *EFI_SMM_LEGACY_UNREGISTER)(
  IN CONST EDKII_SMM_LEGACY_PROTOCOL      *This,
  IN       EFI_HANDLE                     DispatchHandle
  );


struct _EDKII_SMM_LEGACY_PROTOCOL {
  EFI_SMM_LEGACY_REGISTER      Register;
  EFI_SMM_LEGACY_UNREGISTER    UnRegister;
};

extern EFI_GUID  gEfiSmmLegacyProtocolGuid;
extern EFI_GUID  gEfiSmmLegacyCommGuid;

#endif
